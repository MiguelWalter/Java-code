import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.io.*;
import java.util.*;

public class GameAnalyticsGUI {

    // Inner class for storing Player information
    static class Player {
        String playerId;
        String gameId;
        int currency;

        Player(String playerId, String gameId, int currency) {
            this.playerId = playerId;
            this.gameId = gameId;
            this.currency = currency;
        }
    }

    // GUI components
    private JFrame frame;
    private JTextField player1IdField;
    private JTextField player2IdField;
    private JTextArea resultTextArea;
    private JButton loadButton;
    private JButton compareButton;
    private Map<String, Integer> playerCurrencyMap = new HashMap<>();

    // Constructor: Sets up the GUI
    public GameAnalyticsGUI() {
        frame = new JFrame("Game Analytics - Player Comparison");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);
        frame.setLayout(new BorderLayout());

        // Create input fields and buttons
        player1IdField = new JTextField();
        player2IdField = new JTextField();

        loadButton = new JButton("Load Player Data");
        compareButton = new JButton("Compare Players");

        resultTextArea = new JTextArea();
        resultTextArea.setEditable(false);
        resultTextArea.setLineWrap(true);
        resultTextArea.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane(resultTextArea);

        // Layout setup
        JPanel inputPanel = new JPanel(new GridLayout(3, 2, 10, 10));
        inputPanel.add(new JLabel("Player 1 ID:"));
        inputPanel.add(player1IdField);
        inputPanel.add(new JLabel("Player 2 ID:"));
        inputPanel.add(player2IdField);

        JPanel bottomPanel = new JPanel();
        bottomPanel.add(loadButton);
        bottomPanel.add(compareButton);

        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        // Action listeners for buttons
        loadButton.addActionListener(e -> loadPlayerData());
        compareButton.addActionListener(e -> comparePlayers());

        frame.setVisible(true);
    }

    // Method to read player data from CSV file
    public void loadPlayerData() {
        String filename = "C:\\Users\\Miguel\\Documents\\NetBeansProjects\\JavaApplication1\\src\\GameAnalyticsDataset.csv";  // Path to your CSV file

        File file = new File(filename);
        if (!file.exists()) {
            JOptionPane.showMessageDialog(frame, "Error: The file " + filename + " does not exist.");
            return;
        }

        // Read and process the CSV file
        List<Player> players = readPlayerData(filename);
        playerCurrencyMap = aggregatePlayerCurrencies(players);

        JOptionPane.showMessageDialog(frame, "Player data loaded successfully!");
    }

    // Method to read player data from the CSV file
    public List<Player> readPlayerData(String filename) {
        List<Player> players = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            br.readLine();  // Skip header line

            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty()) continue;

                String[] parts = line.split(",");
                if (parts.length >= 8) {  // Assuming playerId is at index 0 and currency is at index 7
                    String playerId = parts[0].trim();
                    String gameId = parts[1].trim();
                    String currencyStr = parts[7].trim();

                    try {
                        int currency = Integer.parseInt(currencyStr);
                        players.add(new Player(playerId, gameId, currency));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(frame, "Error parsing currency for player: " + playerId);
                    }
                } else {
                    JOptionPane.showMessageDialog(frame, "Skipping invalid line: " + line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error reading file: " + e.getMessage());
        }

        return players;
    }

    // Method to aggregate player currencies (sum currencies for the same playerId)
    public Map<String, Integer> aggregatePlayerCurrencies(List<Player> players) {
        Map<String, Integer> playerCurrencyMap = new HashMap<>();
        for (Player player : players) {
            playerCurrencyMap.put(player.playerId, playerCurrencyMap.getOrDefault(player.playerId, 0) + player.currency);
        }
        return playerCurrencyMap;
    }

    // Method to compare the currencies of two players
    public void comparePlayers() {
        String playerId1 = player1IdField.getText().trim();
        String playerId2 = player2IdField.getText().trim();

        if (!playerCurrencyMap.containsKey(playerId1) || !playerCurrencyMap.containsKey(playerId2)) {
            JOptionPane.showMessageDialog(frame, "Error: One or both player IDs are invalid or not found.");
            return;
        }

        int player1Currency = playerCurrencyMap.get(playerId1);
        int player2Currency = playerCurrencyMap.get(playerId2);

        resultTextArea.setText("Comparing Player " + playerId1 + " and Player " + playerId2 + "\n");

        if (player1Currency > player2Currency) {
            resultTextArea.append(playerId1 + " has more currency (" + player1Currency + ") than " + playerId2 + " (" + player2Currency + ")");
        } else if (player1Currency < player2Currency) {
            resultTextArea.append(playerId2 + " has more currency (" + player2Currency + ") than " + playerId1 + " (" + player1Currency + ")");
        } else {
            resultTextArea.append(playerId1 + " and " + playerId2 + " have the same amount of currency: " + player1Currency);
        }
    }

    // Main method to launch the GUI
    public static void main(String[] args) {
        SwingUtilities.invokeLater(GameAnalyticsGUI::new);
    }
}
